#!/usr/bin/perl

use strict;
use warnings;

use YAML::PP;
use Test::More;
use File::Find;
use Data::Dumper;
use Path::Tiny;
use Kanku::Util;

my $cwd = Path::Tiny->cwd;
my $bindir = path($0)->parent->realpath;
my $logdir = path($cwd, '.log');

if ($logdir->exists) {
  $_->remove for $logdir->children;
} else{
  $logdir->mkdir;
}

my @files = (@ARGV > 0) ? @ARGV : ();

if (@files < 1) {
  find(
    sub {
      return if ($File::Find::name eq "$bindir/KankuFile");
      return if ($File::Find::name =~ qr#/JFT/#);
      $_ =~ m/^KankuFile$/ && push @files, $File::Find::name;
      
    },
    $bindir
  );
}

my $tmpdir = Path::Tiny->tempdir;

$::ENV{GNUPGHOME} = $tmpdir->stringify;

my @gpgimport = `gpg --import $bindir/_maintainers/*.asc 2>&1`;

my %dirs2test;
my $no_of_tests = 0;
my $arch        = Kanku::Util->get_arch;

for my $f (sort @files) {
  my $kf        = path($f);
  my $dir       = $kf->parent;
  my $cicd_yml  = path($dir, '.kanku', 'cicd.yml');
  my $arch_yml  = path($dir, '.kanku', 'arch.yml');
  my @tests     = (['verify'], ['info'], ['destroy']);
  my $deftc     = 1;

  if ($arch_yml->is_file) {
    my $ypp = YAML::PP->new;
    my $yml = $ypp->load_file($arch_yml);
    my @match = grep { $_ eq $arch } @{$yml};
    next unless @match;
  }

  if ($cicd_yml->is_file) {
    my $ypp = YAML::PP->new;
    my $yml = $ypp->load_file($cicd_yml);
    if (@{$yml->{tests}->{order}||[]} > 0) {
      for my $t (@{$yml->{tests}->{order}}) {
	my @type = grep { $t->{type} eq $_ } qw/jobs job_groups/;
	croak("Unkown type: '$t->{type}'") unless (@type);
	if ($type[0] eq 'jobs') {
	  for my $tt (@{$t->{$type[0]}}) {
	    push @tests, ['up', '-j', $tt], ['destroy'];
	  }
	}
	if ($type[0] eq 'job_groups') {
	  for my $tt (@{$t->{$type[0]}}) {
	    push @tests, ['up', '--jg', $tt];
	  }
	}
      }
      $deftc = 0;
    }
  }

  push @tests, ['up'], ['destroy'] if $deftc;
  $dirs2test{$dir->stringify} = \@tests;
  $no_of_tests += scalar @tests;
}

plan tests => $no_of_tests;

for my $d (sort keys(%dirs2test)) {
  my $tests = $dirs2test{$d};
  my $du = $d;
  $du =~ s#^$cwd/(.*)#$1#;
  my $m = "Checking $du '%s'";
  $du =~ s#/#_#g;
  my $l = path($logdir, "/$du.log");
  chdir $d;
  for my $tc (@{$tests}) {
    my $cmd = 'kanku ' . join(' ', @{$tc});
    `$cmd --ll TRACE >> $l 2>&1`;
    system("cat", $l) if $::ENV{TEST_VERBOSE};
    ok($? == 0, sprintf($m, $cmd));
  }
}

exit 0;
