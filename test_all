#!/usr/bin/perl

use strict;
use warnings;

use YAML::PP;
use Test::More;
use File::Find;
use Data::Dumper;
use Path::Tiny;

my $cwd = Path::Tiny->cwd;
my $bindir = path($0)->parent->realpath;
my $logdir = path($cwd, '.log');

if ($logdir->exists) {
  $_->remove for $logdir->children;
} else{
  $logdir->mkdir;
}

my @files = (@ARGV > 0) ? @ARGV : ();

if (@files < 1) {
  find(
    sub { 
      if ($File::Find::name ne "$bindir/KankuFile") {
	$_ =~ m/^KankuFile$/ && push @files, $File::Find::name;
      }
    },
    $bindir
  );
}

my $tmpdir = Path::Tiny->tempdir;

$::ENV{GNUPGHOME} = $tmpdir->stringify;

my @gpgimport = `gpg --import $bindir/_maintainers/*.asc 2>&1`;

my %dirs2test;
my $no_of_tests = 0;

for my $f (sort @files) {
  my $kf    = path($f);
  my $dir   = $kf->parent;
  my $cicd  = path($dir, '.kanku', 'cicd.yml');
  my @tests = (['verify'], ['info'], ['destroy']);
  if ($cicd->is_file) {
    my $ypp = YAML::PP->new;
    my $yml = $ypp->load_file($cicd);
    for my $t (@{$yml->{tests}->{order}}) {
      my @type = grep { $t->{type} eq $_ } qw/jobs job_groups/;
      croak("Unkown type: '$t->{type}'") unless (@type);
      if ($type[0] eq 'jobs') {
	for my $tt (@{$t->{$type[0]}}) {
	  push @tests, ['up', '-j', $tt], ['destroy'];
	}
      }
      if ($type[0] eq 'job_groups') {
	for my $tt (@{$t->{$type[0]}}) {
	  push @tests, ['up', '--jg', $tt];
	}
      }
    }
  } else {
    push @tests, ['up'], ['destroy'];
  }
  $dirs2test{$dir->stringify} = \@tests;
  $no_of_tests += scalar @tests;
}

plan tests => $no_of_tests;

for my $d (sort keys(%dirs2test)) {
  my $tests = $dirs2test{$d};
  my $du = $d;
  $du =~ s#^$cwd/(.*)#$1#;
  my $m = "Checking $du '%s'";
  $du =~ s#/#_#g;
  my $l = path($logdir, "/$du.log");
  chdir $d;
  for my $tc (@{$tests}) {
    my $cmd = 'kanku ' . join(' ', @{$tc});
    print "$cmd\n" if $::ENV{DEBUG};
    `$cmd --ll TRACE >> $l 2>&1`;
    ok($? == 0, sprintf($m, $cmd));
  }
}

exit 0;
